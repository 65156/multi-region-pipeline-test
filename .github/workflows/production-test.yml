name: 'Production Plan'

on:
  pull_request_target:
    branches: [ "production" ]

env: 
  TF_VERSION: ${{ vars.TF_VERSION }}
  GITHUB_TOKEN: ${{ github.TOKEN }}
  ## IBM
  IBMC_AUTH_KEY: ${{ secrets.IBMC_AUTH_KEY_PRODUCTION }}
  IBMC_RESOURCE_GROUP: Default-DO-NOT-USE
  ## AWS
  AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID_PRODUCTION }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_PRODUCTION }}

permissions:
  contents: read

## JOBS ##
jobs:
  job1a:
    name: 'prd-plan-1a-aws-frankfurt'
#    needs: [preflight]   
    env:
      AWS_DEFAULT_REGION: eu-central-1
      SET_PATH: 1a-aws-frankfurt

    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
## STEPS ##
    steps:
    # Checkout the repository to the GitHub Actions runner
    - uses: actions/checkout@v4
    
    # Download and Install AWS Cloud CLI
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ vars.TF_VERSION }}
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ./1a-aws-frankfurt
      run: |
        terraform init \
        -backend-config="key=${{ env.SET_PATH }}/${{ github.ref_name }}.tfstate" \

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: ./1a-aws-frankfurt
      run: terraform plan -input=false

  job1b:
    name: 'prd-plan-1b-aws-ireland'
#    needs: [preflight]   
    env:
      AWS_DEFAULT_REGION: eu-west-1
      SET_PATH: 1b-aws-ireland

    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
## STEPS ##
    steps:
    # Checkout the repository to the GitHub Actions runner
    - uses: actions/checkout@v4
    
    # Download and Install AWS Cloud CLI
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ vars.TF_VERSION }}
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ./1b-aws-ireland
      run: |
        terraform init \
        -backend-config="key=${{ env.SET_PATH }}/${{ github.ref_name }}.tfstate" \

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: ./1b-aws-ireland
      run: terraform plan -input=false

  job2a:
    name: 'prd-plan-2a-ibm-frankfurt'
#    needs: [preflight]   
    env:
      IBMC_DEFAULT_REGION: eu-de
      SET_PATH: 2a-ibm-frankfurt

    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
## STEPS ##
    steps:
    # Checkout the repository to the GitHub Actions runner
    - uses: actions/checkout@v4

    # Download and Install IBM Cloud CLI
    - name: Install IBM Cloud CLI
      run: |
        curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
        ibmcloud --version
        ibmcloud config --check-version=false

    # Authenticate with IBM Cloud CLI
    - name: Authenticate with IBM Cloud CLI
      run: |
        ibmcloud login --apikey "${IBMC_AUTH_KEY}" -r "${IBMC_DEFAULT_REGION}" -g "${IBMC_RESOURCE_GROUP}"  

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ vars.TF_VERSION }}
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ./2a-ibm-frankfurt
      run: |
        terraform init \
        -backend-config="key=${{ env.SET_PATH }}/${{ github.ref_name }}.tfstate" \

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: ./2a-ibm-frankfurt
      run: terraform plan -input=false

  job0:
    name: 'prd-plan-0-global-services'    
    needs: [job1a,job1b,job2a]    
    env:
      IBMC_DEFAULT_REGION: eu-de
      AWS_DEFAULT_REGION: eu-central-1
      SET_PATH: 0-global-services

    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

## STEPS ##
    steps:
    # Checkout the repository to the GitHub Actions runner
    - uses: actions/checkout@v4

    # Download and Install AWS Cloud CLI
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    # Download and Install IBM Cloud CLI
    - name: Install IBM Cloud CLI
      run: |
        curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
        ibmcloud --version
        ibmcloud config --check-version=false

    # Authenticate with IBM Cloud CLI
    - name: Authenticate with IBM Cloud CLI
      run: |
        ibmcloud login --apikey "${IBMC_AUTH_KEY}" -r "${IBMC_DEFAULT_REGION}" -g "${IBMC_RESOURCE_GROUP}"  


    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: $TF_VERSION
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ./0-global-services
      run: |
        terraform init \
        -backend-config="key=${{ env.SET_PATH }}/${{ github.ref_name }}.tfstate" \

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: ./0-global-services
      run: terraform plan -input=false

